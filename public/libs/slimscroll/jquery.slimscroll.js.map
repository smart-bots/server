{"version":3,"sources":["jquery.slimscroll.js"],"names":[],"mappingsfile":"jquery.slimscroll.js","sourcesContent":["/*! Copyright (c) 2011 Piotr Rochala (http://rocha.la)\r\n * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)\r\n * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.\r\n *\r\n * Version: 1.3.8\r\n *\r\n */\r\n(function($) {\r\n\r\n  $.fn.extend({\r\n    slimScroll: function(options) {\r\n\r\n      var defaults = {\r\n\r\n        // width in pixels of the visible scroll area\r\n        width : 'auto',\r\n\r\n        // height in pixels of the visible scroll area\r\n        height : '250px',\r\n\r\n        // width in pixels of the scrollbar and rail\r\n        size : '7px',\r\n\r\n        // scrollbar color, accepts any hex/color value\r\n        color: '#000',\r\n\r\n        // scrollbar position - left/right\r\n        position : 'right',\r\n\r\n        // distance in pixels between the side edge and the scrollbar\r\n        distance : '1px',\r\n\r\n        // default scroll position on load - top / bottom / $('selector')\r\n        start : 'top',\r\n\r\n        // sets scrollbar opacity\r\n        opacity : .4,\r\n\r\n        // enables always-on mode for the scrollbar\r\n        alwaysVisible : false,\r\n\r\n        // check if we should hide the scrollbar when user is hovering over\r\n        disableFadeOut : false,\r\n\r\n        // sets visibility of the rail\r\n        railVisible : false,\r\n\r\n        // sets rail color\r\n        railColor : '#333',\r\n\r\n        // sets rail opacity\r\n        railOpacity : .2,\r\n\r\n        // whether  we should use jQuery UI Draggable to enable bar dragging\r\n        railDraggable : true,\r\n\r\n        // defautlt CSS class of the slimscroll rail\r\n        railClass : 'slimScrollRail',\r\n\r\n        // defautlt CSS class of the slimscroll bar\r\n        barClass : 'slimScrollBar',\r\n\r\n        // defautlt CSS class of the slimscroll wrapper\r\n        wrapperClass : 'slimScrollDiv',\r\n\r\n        // check if mousewheel should scroll the window if we reach top/bottom\r\n        allowPageScroll : false,\r\n\r\n        // scroll amount applied to each mouse wheel step\r\n        wheelStep : 20,\r\n\r\n        // scroll amount applied when user is using gestures\r\n        touchScrollStep : 200,\r\n\r\n        // sets border radius\r\n        borderRadius: '7px',\r\n\r\n        // sets border radius of the rail\r\n        railBorderRadius : '7px'\r\n      };\r\n\r\n      var o = $.extend(defaults, options);\r\n\r\n      // do it for every element that matches selector\r\n      this.each(function(){\r\n\r\n      var isOverPanel, isOverBar, isDragg, queueHide, touchDif,\r\n        barHeight, percentScroll, lastScroll,\r\n        divS = '<div></div>',\r\n        minBarHeight = 30,\r\n        releaseScroll = false;\r\n\r\n        // used in event handlers and for better minification\r\n        var me = $(this);\r\n\r\n        // ensure we are not binding it again\r\n        if (me.parent().hasClass(o.wrapperClass))\r\n        {\r\n            // start from last bar position\r\n            var offset = me.scrollTop();\r\n\r\n            // find bar and rail\r\n            bar = me.siblings('.' + o.barClass);\r\n            rail = me.siblings('.' + o.railClass);\r\n\r\n            getBarHeight();\r\n\r\n            // check if we should scroll existing instance\r\n            if ($.isPlainObject(options))\r\n            {\r\n              // Pass height: auto to an existing slimscroll object to force a resize after contents have changed\r\n              if ( 'height' in options && options.height == 'auto' ) {\r\n                me.parent().css('height', 'auto');\r\n                me.css('height', 'auto');\r\n                var height = me.parent().parent().height();\r\n                me.parent().css('height', height);\r\n                me.css('height', height);\r\n              } else if ('height' in options) {\r\n                var h = options.height;\r\n                me.parent().css('height', h);\r\n                me.css('height', h);\r\n              }\r\n\r\n              if ('scrollTo' in options)\r\n              {\r\n                // jump to a static point\r\n                offset = parseInt(o.scrollTo);\r\n              }\r\n              else if ('scrollBy' in options)\r\n              {\r\n                // jump by value pixels\r\n                offset += parseInt(o.scrollBy);\r\n              }\r\n              else if ('destroy' in options)\r\n              {\r\n                // remove slimscroll elements\r\n                bar.remove();\r\n                rail.remove();\r\n                me.unwrap();\r\n                return;\r\n              }\r\n\r\n              // scroll content by the given offset\r\n              scrollContent(offset, false, true);\r\n            }\r\n\r\n            return;\r\n        }\r\n        else if ($.isPlainObject(options))\r\n        {\r\n            if ('destroy' in options)\r\n            {\r\n            \treturn;\r\n            }\r\n        }\r\n\r\n        // optionally set height to the parent's height\r\n        o.height = (o.height == 'auto') ? me.parent().height() : o.height;\r\n\r\n        // wrap content\r\n        var wrapper = $(divS)\r\n          .addClass(o.wrapperClass)\r\n          .css({\r\n            position: 'relative',\r\n            overflow: 'hidden',\r\n            width: o.width,\r\n            height: o.height\r\n          });\r\n\r\n        // update style for the div\r\n        me.css({\r\n          overflow: 'hidden',\r\n          width: o.width,\r\n          height: o.height\r\n        });\r\n\r\n        // create scrollbar rail\r\n        var rail = $(divS)\r\n          .addClass(o.railClass)\r\n          .css({\r\n            width: o.size,\r\n            height: '100%',\r\n            position: 'absolute',\r\n            top: 0,\r\n            display: (o.alwaysVisible && o.railVisible) ? 'block' : 'none',\r\n            'border-radius': o.railBorderRadius,\r\n            background: o.railColor,\r\n            opacity: o.railOpacity,\r\n            zIndex: 90\r\n          });\r\n\r\n        // create scrollbar\r\n        var bar = $(divS)\r\n          .addClass(o.barClass)\r\n          .css({\r\n            background: o.color,\r\n            width: o.size,\r\n            position: 'absolute',\r\n            top: 0,\r\n            opacity: o.opacity,\r\n            display: o.alwaysVisible ? 'block' : 'none',\r\n            'border-radius' : o.borderRadius,\r\n            BorderRadius: o.borderRadius,\r\n            MozBorderRadius: o.borderRadius,\r\n            WebkitBorderRadius: o.borderRadius,\r\n            zIndex: 99\r\n          });\r\n\r\n        // set position\r\n        var posCss = (o.position == 'right') ? { right: o.distance } : { left: o.distance };\r\n        rail.css(posCss);\r\n        bar.css(posCss);\r\n\r\n        // wrap it\r\n        me.wrap(wrapper);\r\n\r\n        // append to parent div\r\n        me.parent().append(bar);\r\n        me.parent().append(rail);\r\n\r\n        // make it draggable and no longer dependent on the jqueryUI\r\n        if (o.railDraggable){\r\n          bar.bind(\"mousedown\", function(e) {\r\n            var $doc = $(document);\r\n            isDragg = true;\r\n            t = parseFloat(bar.css('top'));\r\n            pageY = e.pageY;\r\n\r\n            $doc.bind(\"mousemove.slimscroll\", function(e){\r\n              currTop = t + e.pageY - pageY;\r\n              bar.css('top', currTop);\r\n              scrollContent(0, bar.position().top, false);// scroll content\r\n            });\r\n\r\n            $doc.bind(\"mouseup.slimscroll\", function(e) {\r\n              isDragg = false;hideBar();\r\n              $doc.unbind('.slimscroll');\r\n            });\r\n            return false;\r\n          }).bind(\"selectstart.slimscroll\", function(e){\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            return false;\r\n          });\r\n        }\r\n\r\n        // on rail over\r\n        rail.hover(function(){\r\n          showBar();\r\n        }, function(){\r\n          hideBar();\r\n        });\r\n\r\n        // on bar over\r\n        bar.hover(function(){\r\n          isOverBar = true;\r\n        }, function(){\r\n          isOverBar = false;\r\n        });\r\n\r\n        // show on parent mouseover\r\n        me.hover(function(){\r\n          isOverPanel = true;\r\n          showBar();\r\n          hideBar();\r\n        }, function(){\r\n          isOverPanel = false;\r\n          hideBar();\r\n        });\r\n\r\n        // support for mobile\r\n        me.bind('touchstart', function(e,b){\r\n          if (e.originalEvent.touches.length)\r\n          {\r\n            // record where touch started\r\n            touchDif = e.originalEvent.touches[0].pageY;\r\n          }\r\n        });\r\n\r\n        me.bind('touchmove', function(e){\r\n          // prevent scrolling the page if necessary\r\n          if(!releaseScroll)\r\n          {\r\n  \t\t      e.originalEvent.preventDefault();\r\n\t\t      }\r\n          if (e.originalEvent.touches.length)\r\n          {\r\n            // see how far user swiped\r\n            var diff = (touchDif - e.originalEvent.touches[0].pageY) / o.touchScrollStep;\r\n            // scroll content\r\n            scrollContent(diff, true);\r\n            touchDif = e.originalEvent.touches[0].pageY;\r\n          }\r\n        });\r\n\r\n        // set up initial height\r\n        getBarHeight();\r\n\r\n        // check start position\r\n        if (o.start === 'bottom')\r\n        {\r\n          // scroll content to bottom\r\n          bar.css({ top: me.outerHeight() - bar.outerHeight() });\r\n          scrollContent(0, true);\r\n        }\r\n        else if (o.start !== 'top')\r\n        {\r\n          // assume jQuery selector\r\n          scrollContent($(o.start).position().top, null, true);\r\n\r\n          // make sure bar stays hidden\r\n          if (!o.alwaysVisible) { bar.hide(); }\r\n        }\r\n\r\n        // attach scroll events\r\n        attachWheel(this);\r\n\r\n        function _onWheel(e)\r\n        {\r\n          // use mouse wheel only when mouse is over\r\n          if (!isOverPanel) { return; }\r\n\r\n          var e = e || window.event;\r\n\r\n          var delta = 0;\r\n          if (e.wheelDelta) { delta = -e.wheelDelta/120; }\r\n          if (e.detail) { delta = e.detail / 3; }\r\n\r\n          var target = e.target || e.srcTarget || e.srcElement;\r\n          if ($(target).closest('.' + o.wrapperClass).is(me.parent())) {\r\n            // scroll content\r\n            scrollContent(delta, true);\r\n          }\r\n\r\n          // stop window scroll\r\n          if (e.preventDefault && !releaseScroll) { e.preventDefault(); }\r\n          if (!releaseScroll) { e.returnValue = false; }\r\n        }\r\n\r\n        function scrollContent(y, isWheel, isJump)\r\n        {\r\n          releaseScroll = false;\r\n          var delta = y;\r\n          var maxTop = me.outerHeight() - bar.outerHeight();\r\n\r\n          if (isWheel)\r\n          {\r\n            // move bar with mouse wheel\r\n            delta = parseInt(bar.css('top')) + y * parseInt(o.wheelStep) / 100 * bar.outerHeight();\r\n\r\n            // move bar, make sure it doesn't go out\r\n            delta = Math.min(Math.max(delta, 0), maxTop);\r\n\r\n            // if scrolling down, make sure a fractional change to the\r\n            // scroll position isn't rounded away when the scrollbar's CSS is set\r\n            // this flooring of delta would happened automatically when\r\n            // bar.css is set below, but we floor here for clarity\r\n            delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);\r\n\r\n            // scroll the scrollbar\r\n            bar.css({ top: delta + 'px' });\r\n          }\r\n\r\n          // calculate actual scroll amount\r\n          percentScroll = parseInt(bar.css('top')) / (me.outerHeight() - bar.outerHeight());\r\n          delta = percentScroll * (me[0].scrollHeight - me.outerHeight());\r\n\r\n          if (isJump)\r\n          {\r\n            delta = y;\r\n            var offsetTop = delta / me[0].scrollHeight * me.outerHeight();\r\n            offsetTop = Math.min(Math.max(offsetTop, 0), maxTop);\r\n            bar.css({ top: offsetTop + 'px' });\r\n          }\r\n\r\n          // scroll content\r\n          me.scrollTop(delta);\r\n\r\n          // fire scrolling event\r\n          me.trigger('slimscrolling', ~~delta);\r\n\r\n          // ensure bar is visible\r\n          showBar();\r\n\r\n          // trigger hide when scroll is stopped\r\n          hideBar();\r\n        }\r\n\r\n        function attachWheel(target)\r\n        {\r\n          if (window.addEventListener)\r\n          {\r\n            target.addEventListener('DOMMouseScroll', _onWheel, false );\r\n            target.addEventListener('mousewheel', _onWheel, false );\r\n          }\r\n          else\r\n          {\r\n            document.attachEvent(\"onmousewheel\", _onWheel)\r\n          }\r\n        }\r\n\r\n        function getBarHeight()\r\n        {\r\n          // calculate scrollbar height and make sure it is not too small\r\n          barHeight = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), minBarHeight);\r\n          bar.css({ height: barHeight + 'px' });\r\n\r\n          // hide scrollbar if content is not long enough\r\n          var display = barHeight == me.outerHeight() ? 'none' : 'block';\r\n          bar.css({ display: display });\r\n        }\r\n\r\n        function showBar()\r\n        {\r\n          // recalculate bar height\r\n          getBarHeight();\r\n          clearTimeout(queueHide);\r\n\r\n          // when bar reached top or bottom\r\n          if (percentScroll == ~~percentScroll)\r\n          {\r\n            //release wheel\r\n            releaseScroll = o.allowPageScroll;\r\n\r\n            // publish approporiate event\r\n            if (lastScroll != percentScroll)\r\n            {\r\n                var msg = (~~percentScroll == 0) ? 'top' : 'bottom';\r\n                me.trigger('slimscroll', msg);\r\n            }\r\n          }\r\n          else\r\n          {\r\n            releaseScroll = false;\r\n          }\r\n          lastScroll = percentScroll;\r\n\r\n          // show only when required\r\n          if(barHeight >= me.outerHeight()) {\r\n            //allow window scroll\r\n            releaseScroll = true;\r\n            return;\r\n          }\r\n          bar.stop(true,true).fadeIn('fast');\r\n          if (o.railVisible) { rail.stop(true,true).fadeIn('fast'); }\r\n        }\r\n\r\n        function hideBar()\r\n        {\r\n          // only hide when options allow it\r\n          if (!o.alwaysVisible)\r\n          {\r\n            queueHide = setTimeout(function(){\r\n              if (!(o.disableFadeOut && isOverPanel) && !isOverBar && !isDragg)\r\n              {\r\n                bar.fadeOut('slow');\r\n                rail.fadeOut('slow');\r\n              }\r\n            }, 1000);\r\n          }\r\n        }\r\n\r\n      });\r\n\r\n      // maintain chainability\r\n      return this;\r\n    }\r\n  });\r\n\r\n  $.fn.extend({\r\n    slimscroll: $.fn.slimScroll\r\n  });\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}