{"version":3,"sources":["jquery.multi-select.js"],"names":[],"mappingsfile":"jquery.multi-select.js","sourcesContent":["/*\r\n* MultiSelect v0.9.12\r\n* Copyright (c) 2012 Louis Cuny\r\n*\r\n* This program is free software. It comes without any warranty, to\r\n* the extent permitted by applicable law. You can redistribute it\r\n* and/or modify it under the terms of the Do What The Fuck You Want\r\n* To Public License, Version 2, as published by Sam Hocevar. See\r\n* http://sam.zoy.org/wtfpl/COPYING for more details.\r\n*/\r\n\r\n!function ($) {\r\n\r\n  \"use strict\";\r\n\r\n\r\n /* MULTISELECT CLASS DEFINITION\r\n  * ====================== */\r\n\r\n  var MultiSelect = function (element, options) {\r\n    this.options = options;\r\n    this.$element = $(element);\r\n    this.$container = $('<div/>', { 'class': \"ms-container\" });\r\n    this.$selectableContainer = $('<div/>', { 'class': 'ms-selectable' });\r\n    this.$selectionContainer = $('<div/>', { 'class': 'ms-selection' });\r\n    this.$selectableUl = $('<ul/>', { 'class': \"ms-list\", 'tabindex' : '-1' });\r\n    this.$selectionUl = $('<ul/>', { 'class': \"ms-list\", 'tabindex' : '-1' });\r\n    this.scrollTo = 0;\r\n    this.elemsSelector = 'li:visible:not(.ms-optgroup-label,.ms-optgroup-container,.'+options.disabledClass+')';\r\n  };\r\n\r\n  MultiSelect.prototype = {\r\n    constructor: MultiSelect,\r\n\r\n    init: function(){\r\n      var that = this,\r\n          ms = this.$element;\r\n\r\n      if (ms.next('.ms-container').length === 0){\r\n        ms.css({ position: 'absolute', left: '-9999px' });\r\n        ms.attr('id', ms.attr('id') ? ms.attr('id') : Math.ceil(Math.random()*1000)+'multiselect');\r\n        this.$container.attr('id', 'ms-'+ms.attr('id'));\r\n        this.$container.addClass(that.options.cssClass);\r\n        ms.find('option').each(function(){\r\n          that.generateLisFromOption(this);\r\n        });\r\n\r\n        this.$selectionUl.find('.ms-optgroup-label').hide();\r\n\r\n        if (that.options.selectableHeader){\r\n          that.$selectableContainer.append(that.options.selectableHeader);\r\n        }\r\n        that.$selectableContainer.append(that.$selectableUl);\r\n        if (that.options.selectableFooter){\r\n          that.$selectableContainer.append(that.options.selectableFooter);\r\n        }\r\n\r\n        if (that.options.selectionHeader){\r\n          that.$selectionContainer.append(that.options.selectionHeader);\r\n        }\r\n        that.$selectionContainer.append(that.$selectionUl);\r\n        if (that.options.selectionFooter){\r\n          that.$selectionContainer.append(that.options.selectionFooter);\r\n        }\r\n\r\n        that.$container.append(that.$selectableContainer);\r\n        that.$container.append(that.$selectionContainer);\r\n        ms.after(that.$container);\r\n\r\n        that.activeMouse(that.$selectableUl);\r\n        that.activeKeyboard(that.$selectableUl);\r\n\r\n        var action = that.options.dblClick ? 'dblclick' : 'click';\r\n\r\n        that.$selectableUl.on(action, '.ms-elem-selectable', function(){\r\n          that.select($(this).data('ms-value'));\r\n        });\r\n        that.$selectionUl.on(action, '.ms-elem-selection', function(){\r\n          that.deselect($(this).data('ms-value'));\r\n        });\r\n\r\n        that.activeMouse(that.$selectionUl);\r\n        that.activeKeyboard(that.$selectionUl);\r\n\r\n        ms.on('focus', function(){\r\n          that.$selectableUl.focus();\r\n        })\r\n      }\r\n\r\n      var selectedValues = ms.find('option:selected').map(function(){ return $(this).val(); }).get();\r\n      that.select(selectedValues, 'init');\r\n\r\n      if (typeof that.options.afterInit === 'function') {\r\n        that.options.afterInit.call(this, this.$container);\r\n      }\r\n    },\r\n\r\n    'generateLisFromOption' : function(option, index, $container){\r\n      var that = this,\r\n          ms = that.$element,\r\n          attributes = \"\",\r\n          $option = $(option);\r\n\r\n      for (var cpt = 0; cpt < option.attributes.length; cpt++){\r\n        var attr = option.attributes[cpt];\r\n\r\n        if(attr.name !== 'value' && attr.name !== 'disabled'){\r\n          attributes += attr.name+'=\"'+attr.value+'\" ';\r\n        }\r\n      }\r\n      var selectableLi = $('<li '+attributes+'><span>'+that.escapeHTML($option.text())+'</span></li>'),\r\n          selectedLi = selectableLi.clone(),\r\n          value = $option.val(),\r\n          elementId = that.sanitize(value);\r\n\r\n      selectableLi\r\n        .data('ms-value', value)\r\n        .addClass('ms-elem-selectable')\r\n        .attr('id', elementId+'-selectable');\r\n\r\n      selectedLi\r\n        .data('ms-value', value)\r\n        .addClass('ms-elem-selection')\r\n        .attr('id', elementId+'-selection')\r\n        .hide();\r\n\r\n      if ($option.prop('disabled') || ms.prop('disabled')){\r\n        selectedLi.addClass(that.options.disabledClass);\r\n        selectableLi.addClass(that.options.disabledClass);\r\n      }\r\n\r\n      var $optgroup = $option.parent('optgroup');\r\n\r\n      if ($optgroup.length > 0){\r\n        var optgroupLabel = $optgroup.attr('label'),\r\n            optgroupId = that.sanitize(optgroupLabel),\r\n            $selectableOptgroup = that.$selectableUl.find('#optgroup-selectable-'+optgroupId),\r\n            $selectionOptgroup = that.$selectionUl.find('#optgroup-selection-'+optgroupId);\r\n\r\n        if ($selectableOptgroup.length === 0){\r\n          var optgroupContainerTpl = '<li class=\"ms-optgroup-container\"></li>',\r\n              optgroupTpl = '<ul class=\"ms-optgroup\"><li class=\"ms-optgroup-label\"><span>'+optgroupLabel+'</span></li></ul>';\r\n\r\n          $selectableOptgroup = $(optgroupContainerTpl);\r\n          $selectionOptgroup = $(optgroupContainerTpl);\r\n          $selectableOptgroup.attr('id', 'optgroup-selectable-'+optgroupId);\r\n          $selectionOptgroup.attr('id', 'optgroup-selection-'+optgroupId);\r\n          $selectableOptgroup.append($(optgroupTpl));\r\n          $selectionOptgroup.append($(optgroupTpl));\r\n          if (that.options.selectableOptgroup){\r\n            $selectableOptgroup.find('.ms-optgroup-label').on('click', function(){\r\n              var values = $optgroup.children(':not(:selected, :disabled)').map(function(){ return $(this).val() }).get();\r\n              that.select(values);\r\n            });\r\n            $selectionOptgroup.find('.ms-optgroup-label').on('click', function(){\r\n              var values = $optgroup.children(':selected:not(:disabled)').map(function(){ return $(this).val() }).get();\r\n              that.deselect(values);\r\n            });\r\n          }\r\n          that.$selectableUl.append($selectableOptgroup);\r\n          that.$selectionUl.append($selectionOptgroup);\r\n        }\r\n        index = index == undefined ? $selectableOptgroup.find('ul').children().length : index + 1;\r\n        selectableLi.insertAt(index, $selectableOptgroup.children());\r\n        selectedLi.insertAt(index, $selectionOptgroup.children());\r\n      } else {\r\n        index = index == undefined ? that.$selectableUl.children().length : index;\r\n\r\n        selectableLi.insertAt(index, that.$selectableUl);\r\n        selectedLi.insertAt(index, that.$selectionUl);\r\n      }\r\n    },\r\n\r\n    'addOption' : function(options){\r\n      var that = this;\r\n\r\n      if (options.value) options = [options];\r\n      $.each(options, function(index, option){\r\n        if (option.value && that.$element.find(\"option[value='\"+option.value+\"']\").length === 0){\r\n          var $option = $('<option value=\"'+option.value+'\">'+option.text+'</option>'),\r\n              index = parseInt((typeof option.index === 'undefined' ? that.$element.children().length : option.index)),\r\n              $container = option.nested == undefined ? that.$element : $(\"optgroup[label='\"+option.nested+\"']\")\r\n\r\n          $option.insertAt(index, $container);\r\n          that.generateLisFromOption($option.get(0), index, option.nested);\r\n        }\r\n      })\r\n    },\r\n\r\n    'escapeHTML' : function(text){\r\n      return $(\"<div>\").text(text).html();\r\n    },\r\n\r\n    'activeKeyboard' : function($list){\r\n      var that = this;\r\n\r\n      $list.on('focus', function(){\r\n        $(this).addClass('ms-focus');\r\n      })\r\n      .on('blur', function(){\r\n        $(this).removeClass('ms-focus');\r\n      })\r\n      .on('keydown', function(e){\r\n        switch (e.which) {\r\n          case 40:\r\n          case 38:\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            that.moveHighlight($(this), (e.which === 38) ? -1 : 1);\r\n            return;\r\n          case 37:\r\n          case 39:\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            that.switchList($list);\r\n            return;\r\n          case 9:\r\n            if(that.$element.is('[tabindex]')){\r\n              e.preventDefault();\r\n              var tabindex = parseInt(that.$element.attr('tabindex'), 10);\r\n              tabindex = (e.shiftKey) ? tabindex-1 : tabindex+1;\r\n              $('[tabindex=\"'+(tabindex)+'\"]').focus();\r\n              return;\r\n            }else{\r\n              if(e.shiftKey){\r\n                that.$element.trigger('focus');\r\n              }\r\n            }\r\n        }\r\n        if($.inArray(e.which, that.options.keySelect) > -1){\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          that.selectHighlighted($list);\r\n          return;\r\n        }\r\n      });\r\n    },\r\n\r\n    'moveHighlight': function($list, direction){\r\n      var $elems = $list.find(this.elemsSelector),\r\n          $currElem = $elems.filter('.ms-hover'),\r\n          $nextElem = null,\r\n          elemHeight = $elems.first().outerHeight(),\r\n          containerHeight = $list.height(),\r\n          containerSelector = '#'+this.$container.prop('id');\r\n\r\n      $elems.removeClass('ms-hover');\r\n      if (direction === 1){ // DOWN\r\n\r\n        $nextElem = $currElem.nextAll(this.elemsSelector).first();\r\n        if ($nextElem.length === 0){\r\n          var $optgroupUl = $currElem.parent();\r\n\r\n          if ($optgroupUl.hasClass('ms-optgroup')){\r\n            var $optgroupLi = $optgroupUl.parent(),\r\n                $nextOptgroupLi = $optgroupLi.next(':visible');\r\n\r\n            if ($nextOptgroupLi.length > 0){\r\n              $nextElem = $nextOptgroupLi.find(this.elemsSelector).first();\r\n            } else {\r\n              $nextElem = $elems.first();\r\n            }\r\n          } else {\r\n            $nextElem = $elems.first();\r\n          }\r\n        }\r\n      } else if (direction === -1){ // UP\r\n\r\n        $nextElem = $currElem.prevAll(this.elemsSelector).first();\r\n        if ($nextElem.length === 0){\r\n          var $optgroupUl = $currElem.parent();\r\n\r\n          if ($optgroupUl.hasClass('ms-optgroup')){\r\n            var $optgroupLi = $optgroupUl.parent(),\r\n                $prevOptgroupLi = $optgroupLi.prev(':visible');\r\n\r\n            if ($prevOptgroupLi.length > 0){\r\n              $nextElem = $prevOptgroupLi.find(this.elemsSelector).last();\r\n            } else {\r\n              $nextElem = $elems.last();\r\n            }\r\n          } else {\r\n            $nextElem = $elems.last();\r\n          }\r\n        }\r\n      }\r\n      if ($nextElem.length > 0){\r\n        $nextElem.addClass('ms-hover');\r\n        var scrollTo = $list.scrollTop() + $nextElem.position().top - \r\n                       containerHeight / 2 + elemHeight / 2;\r\n\r\n        $list.scrollTop(scrollTo);\r\n      }\r\n    },\r\n\r\n    'selectHighlighted' : function($list){\r\n      var $elems = $list.find(this.elemsSelector),\r\n          $highlightedElem = $elems.filter('.ms-hover').first();\r\n\r\n      if ($highlightedElem.length > 0){\r\n        if ($list.parent().hasClass('ms-selectable')){\r\n          this.select($highlightedElem.data('ms-value'));\r\n        } else {\r\n          this.deselect($highlightedElem.data('ms-value'));\r\n        }\r\n        $elems.removeClass('ms-hover');\r\n      }\r\n    },\r\n\r\n    'switchList' : function($list){\r\n      $list.blur();\r\n      this.$container.find(this.elemsSelector).removeClass('ms-hover');\r\n      if ($list.parent().hasClass('ms-selectable')){\r\n        this.$selectionUl.focus();\r\n      } else {\r\n        this.$selectableUl.focus();\r\n      }\r\n    },\r\n\r\n    'activeMouse' : function($list){\r\n      var that = this;\r\n\r\n      $('body').on('mouseenter', that.elemsSelector, function(){\r\n        $(this).parents('.ms-container').find(that.elemsSelector).removeClass('ms-hover');\r\n        $(this).addClass('ms-hover');\r\n      });\r\n    },\r\n\r\n    'refresh' : function() {\r\n      this.destroy();\r\n      this.$element.multiSelect(this.options);\r\n    },\r\n\r\n    'destroy' : function(){\r\n      $(\"#ms-\"+this.$element.attr(\"id\")).remove();\r\n      this.$element.css('position', '').css('left', '')\r\n      this.$element.removeData('multiselect');\r\n    },\r\n\r\n    'select' : function(value, method){\r\n      if (typeof value === 'string'){ value = [value]; }\r\n\r\n      var that = this,\r\n          ms = this.$element,\r\n          msIds = $.map(value, function(val){ return(that.sanitize(val)); }),\r\n          selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #')+'-selectable').filter(':not(.'+that.options.disabledClass+')'),\r\n          selections = this.$selectionUl.find('#' + msIds.join('-selection, #') + '-selection').filter(':not(.'+that.options.disabledClass+')'),\r\n          options = ms.find('option:not(:disabled)').filter(function(){ return($.inArray(this.value, value) > -1); });\r\n\r\n      if (method === 'init'){\r\n        selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #')+'-selectable'),\r\n        selections = this.$selectionUl.find('#' + msIds.join('-selection, #') + '-selection');\r\n      }\r\n\r\n      if (selectables.length > 0){\r\n        selectables.addClass('ms-selected').hide();\r\n        selections.addClass('ms-selected').show();\r\n\r\n        options.prop('selected', true);\r\n\r\n        that.$container.find(that.elemsSelector).removeClass('ms-hover');\r\n\r\n        var selectableOptgroups = that.$selectableUl.children('.ms-optgroup-container');\r\n        if (selectableOptgroups.length > 0){\r\n          selectableOptgroups.each(function(){\r\n            var selectablesLi = $(this).find('.ms-elem-selectable');\r\n            if (selectablesLi.length === selectablesLi.filter('.ms-selected').length){\r\n              $(this).find('.ms-optgroup-label').hide();\r\n            }\r\n          });\r\n\r\n          var selectionOptgroups = that.$selectionUl.children('.ms-optgroup-container');\r\n          selectionOptgroups.each(function(){\r\n            var selectionsLi = $(this).find('.ms-elem-selection');\r\n            if (selectionsLi.filter('.ms-selected').length > 0){\r\n              $(this).find('.ms-optgroup-label').show();\r\n            }\r\n          });\r\n        } else {\r\n          if (that.options.keepOrder && method !== 'init'){\r\n            var selectionLiLast = that.$selectionUl.find('.ms-selected');\r\n            if((selectionLiLast.length > 1) && (selectionLiLast.last().get(0) != selections.get(0))) {\r\n              selections.insertAfter(selectionLiLast.last());\r\n            }\r\n          }\r\n        }\r\n        if (method !== 'init'){\r\n          ms.trigger('change');\r\n          if (typeof that.options.afterSelect === 'function') {\r\n            that.options.afterSelect.call(this, value);\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    'deselect' : function(value){\r\n      if (typeof value === 'string'){ value = [value]; }\r\n\r\n      var that = this,\r\n          ms = this.$element,\r\n          msIds = $.map(value, function(val){ return(that.sanitize(val)); }),\r\n          selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #')+'-selectable'),\r\n          selections = this.$selectionUl.find('#' + msIds.join('-selection, #')+'-selection').filter('.ms-selected').filter(':not(.'+that.options.disabledClass+')'),\r\n          options = ms.find('option').filter(function(){ return($.inArray(this.value, value) > -1); });\r\n\r\n      if (selections.length > 0){\r\n        selectables.removeClass('ms-selected').show();\r\n        selections.removeClass('ms-selected').hide();\r\n        options.prop('selected', false);\r\n\r\n        that.$container.find(that.elemsSelector).removeClass('ms-hover');\r\n\r\n        var selectableOptgroups = that.$selectableUl.children('.ms-optgroup-container');\r\n        if (selectableOptgroups.length > 0){\r\n          selectableOptgroups.each(function(){\r\n            var selectablesLi = $(this).find('.ms-elem-selectable');\r\n            if (selectablesLi.filter(':not(.ms-selected)').length > 0){\r\n              $(this).find('.ms-optgroup-label').show();\r\n            }\r\n          });\r\n\r\n          var selectionOptgroups = that.$selectionUl.children('.ms-optgroup-container');\r\n          selectionOptgroups.each(function(){\r\n            var selectionsLi = $(this).find('.ms-elem-selection');\r\n            if (selectionsLi.filter('.ms-selected').length === 0){\r\n              $(this).find('.ms-optgroup-label').hide();\r\n            }\r\n          });\r\n        }\r\n        ms.trigger('change');\r\n        if (typeof that.options.afterDeselect === 'function') {\r\n          that.options.afterDeselect.call(this, value);\r\n        }\r\n      }\r\n    },\r\n\r\n    'select_all' : function(){\r\n      var ms = this.$element,\r\n          values = ms.val();\r\n\r\n      ms.find('option:not(\":disabled\")').prop('selected', true);\r\n      this.$selectableUl.find('.ms-elem-selectable').filter(':not(.'+this.options.disabledClass+')').addClass('ms-selected').hide();\r\n      this.$selectionUl.find('.ms-optgroup-label').show();\r\n      this.$selectableUl.find('.ms-optgroup-label').hide();\r\n      this.$selectionUl.find('.ms-elem-selection').filter(':not(.'+this.options.disabledClass+')').addClass('ms-selected').show();\r\n      this.$selectionUl.focus();\r\n      ms.trigger('change');\r\n      if (typeof this.options.afterSelect === 'function') {\r\n        var selectedValues = $.grep(ms.val(), function(item){\r\n          return $.inArray(item, values) < 0;\r\n        });\r\n        this.options.afterSelect.call(this, selectedValues);\r\n      }\r\n    },\r\n\r\n    'deselect_all' : function(){\r\n      var ms = this.$element,\r\n          values = ms.val();\r\n\r\n      ms.find('option').prop('selected', false);\r\n      this.$selectableUl.find('.ms-elem-selectable').removeClass('ms-selected').show();\r\n      this.$selectionUl.find('.ms-optgroup-label').hide();\r\n      this.$selectableUl.find('.ms-optgroup-label').show();\r\n      this.$selectionUl.find('.ms-elem-selection').removeClass('ms-selected').hide();\r\n      this.$selectableUl.focus();\r\n      ms.trigger('change');\r\n      if (typeof this.options.afterDeselect === 'function') {\r\n        this.options.afterDeselect.call(this, values);\r\n      }\r\n    },\r\n\r\n    sanitize: function(value){\r\n      var hash = 0, i, character;\r\n      if (value.length == 0) return hash;\r\n      var ls = 0;\r\n      for (i = 0, ls = value.length; i < ls; i++) {\r\n        character  = value.charCodeAt(i);\r\n        hash  = ((hash<<5)-hash)+character;\r\n        hash |= 0; // Convert to 32bit integer\r\n      }\r\n      return hash;\r\n    }\r\n  };\r\n\r\n  /* MULTISELECT PLUGIN DEFINITION\r\n   * ======================= */\r\n\r\n  $.fn.multiSelect = function () {\r\n    var option = arguments[0],\r\n        args = arguments;\r\n\r\n    return this.each(function () {\r\n      var $this = $(this),\r\n          data = $this.data('multiselect'),\r\n          options = $.extend({}, $.fn.multiSelect.defaults, $this.data(), typeof option === 'object' && option);\r\n\r\n      if (!data){ $this.data('multiselect', (data = new MultiSelect(this, options))); }\r\n\r\n      if (typeof option === 'string'){\r\n        data[option](args[1]);\r\n      } else {\r\n        data.init();\r\n      }\r\n    });\r\n  };\r\n\r\n  $.fn.multiSelect.defaults = {\r\n    keySelect: [32],\r\n    selectableOptgroup: false,\r\n    disabledClass : 'disabled',\r\n    dblClick : false,\r\n    keepOrder: false,\r\n    cssClass: ''\r\n  };\r\n\r\n  $.fn.multiSelect.Constructor = MultiSelect;\r\n\r\n  $.fn.insertAt = function(index, $parent) {\r\n    return this.each(function() {\r\n      if (index === 0) {\r\n        $parent.prepend(this);\r\n      } else {\r\n        $parent.children().eq(index - 1).after(this);\r\n      }\r\n    });\r\n}\r\n\r\n}(window.jQuery);\r\n"],"sourceRoot":"/source/"}