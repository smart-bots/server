{"version":3,"sources":["intlTelInput.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"intlTelInput.js","sourcesContent":["/*\r\n * International Telephone Input v9.0.6\r\n * https://github.com/jackocnr/intl-tel-input.git\r\n * Licensed under the MIT license\r\n */\r\n// wrap in UMD - see https://github.com/umdjs/umd/blob/master/jqueryPluginCommonjs.js\r\n(function(factory) {\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define([ \"jquery\" ], function($) {\r\n            factory($, window, document);\r\n        });\r\n    } else if (typeof module === \"object\" && module.exports) {\r\n        module.exports = factory(require(\"jquery\"), window, document);\r\n    } else {\r\n        factory(jQuery, window, document);\r\n    }\r\n})(function($, window, document, undefined) {\r\n    \"use strict\";\r\n    // these vars persist through all instances of the plugin\r\n    var pluginName = \"intlTelInput\", id = 1, // give each instance it's own id for namespaced event handling\r\n    defaults = {\r\n        // whether or not to allow the dropdown\r\n        allowDropdown: true,\r\n        // if there is just a dial code in the input: remove it on blur, and re-add it on focus\r\n        autoHideDialCode: true,\r\n        // add or remove input placeholder with an example number for the selected country\r\n        autoPlaceholder: true,\r\n        // modify the auto placeholder\r\n        customPlaceholder: null,\r\n        // append menu to a specific element\r\n        dropdownContainer: \"\",\r\n        // don't display these countries\r\n        excludeCountries: [],\r\n        // format the input value during initialisation\r\n        formatOnInit: true,\r\n        // geoIp lookup function\r\n        geoIpLookup: null,\r\n        // initial country\r\n        initialCountry: \"\",\r\n        // don't insert international dial codes\r\n        nationalMode: true,\r\n        // number type to use for placeholders\r\n        numberType: \"MOBILE\",\r\n        // display only these countries\r\n        onlyCountries: [],\r\n        // the countries at the top of the list. defaults to united states and united kingdom\r\n        preferredCountries: [ \"us\", \"gb\" ],\r\n        // display the country dial code next to the selected flag so it's not part of the typed number\r\n        separateDialCode: false,\r\n        // specify the path to the libphonenumber script to enable validation/formatting\r\n        utilsScript: \"\"\r\n    }, keys = {\r\n        UP: 38,\r\n        DOWN: 40,\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        PLUS: 43,\r\n        A: 65,\r\n        Z: 90,\r\n        SPACE: 32,\r\n        TAB: 9\r\n    };\r\n    // keep track of if the window.load event has fired as impossible to check after the fact\r\n    $(window).on(\"load\", function() {\r\n        // UPDATE: use a public static field so we can fudge it in the tests\r\n        $.fn[pluginName].windowLoaded = true;\r\n    });\r\n    function Plugin(element, options) {\r\n        this.telInput = $(element);\r\n        this.options = $.extend({}, defaults, options);\r\n        // event namespace\r\n        this.ns = \".\" + pluginName + id++;\r\n        // Chrome, FF, Safari, IE9+\r\n        this.isGoodBrowser = Boolean(element.setSelectionRange);\r\n        this.hadInitialPlaceholder = Boolean($(element).attr(\"placeholder\"));\r\n    }\r\n    Plugin.prototype = {\r\n        _init: function() {\r\n            // if in nationalMode, disable options relating to dial codes\r\n            if (this.options.nationalMode) {\r\n                this.options.autoHideDialCode = false;\r\n            }\r\n            // if separateDialCode then doesn't make sense to A) insert dial code into input (autoHideDialCode), and B) display national numbers (because we're displaying the country dial code next to them)\r\n            if (this.options.separateDialCode) {\r\n                this.options.autoHideDialCode = this.options.nationalMode = false;\r\n                // let's force this for now for simplicity - we can support this later if need be\r\n                this.options.allowDropdown = true;\r\n            }\r\n            // we cannot just test screen size as some smartphones/website meta tags will report desktop resolutions\r\n            // Note: for some reason jasmine breaks if you put this in the main Plugin function with the rest of these declarations\r\n            // Note: to target Android Mobiles (and not Tablets), we must find \"Android\" and \"Mobile\"\r\n            this.isMobile = /Android.+Mobile|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n            if (this.isMobile) {\r\n                // trigger the mobile dropdown css\r\n                $(\"body\").addClass(\"iti-mobile\");\r\n                // on mobile, we want a full screen dropdown, so we must append it to the body\r\n                if (!this.options.dropdownContainer) {\r\n                    this.options.dropdownContainer = \"body\";\r\n                }\r\n            }\r\n            // we return these deferred objects from the _init() call so they can be watched, and then we resolve them when each specific request returns\r\n            // Note: again, jasmine breaks when I put these in the Plugin function\r\n            this.autoCountryDeferred = new $.Deferred();\r\n            this.utilsScriptDeferred = new $.Deferred();\r\n            // process all the data: onlyCountries, excludeCountries, preferredCountries etc\r\n            this._processCountryData();\r\n            // generate the markup\r\n            this._generateMarkup();\r\n            // set the initial state of the input value and the selected flag\r\n            this._setInitialState();\r\n            // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\r\n            this._initListeners();\r\n            // utils script, and auto country\r\n            this._initRequests();\r\n            // return the deferreds\r\n            return [ this.autoCountryDeferred, this.utilsScriptDeferred ];\r\n        },\r\n        /********************\r\n   *  PRIVATE METHODS\r\n   ********************/\r\n        // prepare all of the country data, including onlyCountries, excludeCountries and preferredCountries options\r\n        _processCountryData: function() {\r\n            // process onlyCountries or excludeCountries array if present\r\n            this._processAllCountries();\r\n            // process the countryCodes map\r\n            this._processCountryCodes();\r\n            // process the preferredCountries\r\n            this._processPreferredCountries();\r\n        },\r\n        // add a country code to this.countryCodes\r\n        _addCountryCode: function(iso2, dialCode, priority) {\r\n            if (!(dialCode in this.countryCodes)) {\r\n                this.countryCodes[dialCode] = [];\r\n            }\r\n            var index = priority || 0;\r\n            this.countryCodes[dialCode][index] = iso2;\r\n        },\r\n        // filter the given countries using the process function\r\n        _filterCountries: function(countryArray, processFunc) {\r\n            var i;\r\n            // standardise case\r\n            for (i = 0; i < countryArray.length; i++) {\r\n                countryArray[i] = countryArray[i].toLowerCase();\r\n            }\r\n            // build instance country array\r\n            this.countries = [];\r\n            for (i = 0; i < allCountries.length; i++) {\r\n                if (processFunc($.inArray(allCountries[i].iso2, countryArray))) {\r\n                    this.countries.push(allCountries[i]);\r\n                }\r\n            }\r\n        },\r\n        // process onlyCountries or excludeCountries array if present\r\n        _processAllCountries: function() {\r\n            if (this.options.onlyCountries.length) {\r\n                // process onlyCountries option\r\n                this._filterCountries(this.options.onlyCountries, function(inArray) {\r\n                    // if country is in array\r\n                    return inArray != -1;\r\n                });\r\n            } else if (this.options.excludeCountries.length) {\r\n                // process excludeCountries option\r\n                this._filterCountries(this.options.excludeCountries, function(inArray) {\r\n                    // if country is not in array\r\n                    return inArray == -1;\r\n                });\r\n            } else {\r\n                this.countries = allCountries;\r\n            }\r\n        },\r\n        // process the countryCodes map\r\n        _processCountryCodes: function() {\r\n            this.countryCodes = {};\r\n            for (var i = 0; i < this.countries.length; i++) {\r\n                var c = this.countries[i];\r\n                this._addCountryCode(c.iso2, c.dialCode, c.priority);\r\n                // area codes\r\n                if (c.areaCodes) {\r\n                    for (var j = 0; j < c.areaCodes.length; j++) {\r\n                        // full dial code is country code + dial code\r\n                        this._addCountryCode(c.iso2, c.dialCode + c.areaCodes[j]);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        // process preferred countries - iterate through the preferences, fetching the country data for each one\r\n        _processPreferredCountries: function() {\r\n            this.preferredCountries = [];\r\n            for (var i = 0; i < this.options.preferredCountries.length; i++) {\r\n                var countryCode = this.options.preferredCountries[i].toLowerCase(), countryData = this._getCountryData(countryCode, false, true);\r\n                if (countryData) {\r\n                    this.preferredCountries.push(countryData);\r\n                }\r\n            }\r\n        },\r\n        // generate all of the markup for the plugin: the selected flag overlay, and the dropdown\r\n        _generateMarkup: function() {\r\n            // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can easily put the plugin in an inconsistent state e.g. the wrong flag selected for the autocompleted number, which on submit could mean the wrong number is saved (esp in nationalMode)\r\n            this.telInput.attr(\"autocomplete\", \"off\");\r\n            // containers (mostly for positioning)\r\n            var parentClass = \"intl-tel-input\";\r\n            if (this.options.allowDropdown) {\r\n                parentClass += \" allow-dropdown\";\r\n            }\r\n            if (this.options.separateDialCode) {\r\n                parentClass += \" separate-dial-code\";\r\n            }\r\n            this.telInput.wrap($(\"<div>\", {\r\n                \"class\": parentClass\r\n            }));\r\n            this.flagsContainer = $(\"<div>\", {\r\n                \"class\": \"flag-container\"\r\n            }).insertBefore(this.telInput);\r\n            // currently selected flag (displayed to left of input)\r\n            var selectedFlag = $(\"<div>\", {\r\n                \"class\": \"selected-flag\"\r\n            });\r\n            selectedFlag.appendTo(this.flagsContainer);\r\n            this.selectedFlagInner = $(\"<div>\", {\r\n                \"class\": \"iti-flag\"\r\n            }).appendTo(selectedFlag);\r\n            if (this.options.separateDialCode) {\r\n                this.selectedDialCode = $(\"<div>\", {\r\n                    \"class\": \"selected-dial-code\"\r\n                }).appendTo(selectedFlag);\r\n            }\r\n            if (this.options.allowDropdown) {\r\n                // make element focusable and tab naviagable\r\n                selectedFlag.attr(\"tabindex\", \"0\");\r\n                // CSS triangle\r\n                $(\"<div>\", {\r\n                    \"class\": \"iti-arrow\"\r\n                }).appendTo(selectedFlag);\r\n                // country dropdown: preferred countries, then divider, then all countries\r\n                this.countryList = $(\"<ul>\", {\r\n                    \"class\": \"country-list hide\"\r\n                });\r\n                if (this.preferredCountries.length) {\r\n                    this._appendListItems(this.preferredCountries, \"preferred\");\r\n                    $(\"<li>\", {\r\n                        \"class\": \"divider\"\r\n                    }).appendTo(this.countryList);\r\n                }\r\n                this._appendListItems(this.countries, \"\");\r\n                // this is useful in lots of places\r\n                this.countryListItems = this.countryList.children(\".country\");\r\n                // create dropdownContainer markup\r\n                if (this.options.dropdownContainer) {\r\n                    this.dropdown = $(\"<div>\", {\r\n                        \"class\": \"intl-tel-input iti-container\"\r\n                    }).append(this.countryList);\r\n                } else {\r\n                    this.countryList.appendTo(this.flagsContainer);\r\n                }\r\n            } else {\r\n                // a little hack so we don't break anything\r\n                this.countryListItems = $();\r\n            }\r\n        },\r\n        // add a country <li> to the countryList <ul> container\r\n        _appendListItems: function(countries, className) {\r\n            // we create so many DOM elements, it is faster to build a temp string\r\n            // and then add everything to the DOM in one go at the end\r\n            var tmp = \"\";\r\n            // for each country\r\n            for (var i = 0; i < countries.length; i++) {\r\n                var c = countries[i];\r\n                // open the list item\r\n                tmp += \"<li class='country \" + className + \"' data-dial-code='\" + c.dialCode + \"' data-country-code='\" + c.iso2 + \"'>\";\r\n                // add the flag\r\n                tmp += \"<div class='flag-box'><div class='iti-flag \" + c.iso2 + \"'></div></div>\";\r\n                // and the country name and dial code\r\n                tmp += \"<span class='country-name'>\" + c.name + \"</span>\";\r\n                tmp += \"<span class='dial-code'>+\" + c.dialCode + \"</span>\";\r\n                // close the list item\r\n                tmp += \"</li>\";\r\n            }\r\n            this.countryList.append(tmp);\r\n        },\r\n        // set the initial state of the input value and the selected flag by:\r\n        // 1. extracting a dial code from the given number\r\n        // 2. using explicit initialCountry\r\n        // 3. picking the first preferred country\r\n        // 4. picking the first country\r\n        _setInitialState: function() {\r\n            var val = this.telInput.val();\r\n            // if we already have a dial code we can go ahead and set the flag, else fall back to default\r\n            if (this._getDialCode(val)) {\r\n                this._updateFlagFromNumber(val, true);\r\n            } else if (this.options.initialCountry !== \"auto\") {\r\n                // see if we should select a flag\r\n                if (this.options.initialCountry) {\r\n                    this._setFlag(this.options.initialCountry, true);\r\n                } else {\r\n                    // no dial code and no initialCountry, so default to first in list\r\n                    this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\r\n                    if (!val) {\r\n                        this._setFlag(this.defaultCountry, true);\r\n                    }\r\n                }\r\n                // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\r\n                if (!val && !this.options.nationalMode && !this.options.autoHideDialCode && !this.options.separateDialCode) {\r\n                    this.telInput.val(\"+\" + this.selectedCountryData.dialCode);\r\n                }\r\n            }\r\n            // NOTE: if initialCountry is set to auto, that will be handled separately\r\n            // format\r\n            if (val) {\r\n                // this wont be run after _updateDialCode as that's only called if no val\r\n                this._updateValFromNumber(val, this.options.formatOnInit);\r\n            }\r\n        },\r\n        // initialise the main event listeners: input keyup, and click selected flag\r\n        _initListeners: function() {\r\n            this._initKeyListeners();\r\n            if (this.options.autoHideDialCode) {\r\n                this._initFocusListeners();\r\n            }\r\n            if (this.options.allowDropdown) {\r\n                this._initDropdownListeners();\r\n            }\r\n        },\r\n        // initialise the dropdown listeners\r\n        _initDropdownListeners: function() {\r\n            var that = this;\r\n            // hack for input nested inside label: clicking the selected-flag to open the dropdown would then automatically trigger a 2nd click on the input which would close it again\r\n            var label = this.telInput.closest(\"label\");\r\n            if (label.length) {\r\n                label.on(\"click\" + this.ns, function(e) {\r\n                    // if the dropdown is closed, then focus the input, else ignore the click\r\n                    if (that.countryList.hasClass(\"hide\")) {\r\n                        that.telInput.focus();\r\n                    } else {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n            }\r\n            // toggle country dropdown on click\r\n            var selectedFlag = this.selectedFlagInner.parent();\r\n            selectedFlag.on(\"click\" + this.ns, function(e) {\r\n                // only intercept this event if we're opening the dropdown\r\n                // else let it bubble up to the top (\"click-off-to-close\" listener)\r\n                // we cannot just stopPropagation as it may be needed to close another instance\r\n                if (that.countryList.hasClass(\"hide\") && !that.telInput.prop(\"disabled\") && !that.telInput.prop(\"readonly\")) {\r\n                    that._showDropdown();\r\n                }\r\n            });\r\n            // open dropdown list if currently focused\r\n            this.flagsContainer.on(\"keydown\" + that.ns, function(e) {\r\n                var isDropdownHidden = that.countryList.hasClass(\"hide\");\r\n                if (isDropdownHidden && (e.which == keys.UP || e.which == keys.DOWN || e.which == keys.SPACE || e.which == keys.ENTER)) {\r\n                    // prevent form from being submitted if \"ENTER\" was pressed\r\n                    e.preventDefault();\r\n                    // prevent event from being handled again by document\r\n                    e.stopPropagation();\r\n                    that._showDropdown();\r\n                }\r\n                // allow navigation from dropdown to input on TAB\r\n                if (e.which == keys.TAB) {\r\n                    that._closeDropdown();\r\n                }\r\n            });\r\n        },\r\n        // init many requests: utils script / geo ip lookup\r\n        _initRequests: function() {\r\n            var that = this;\r\n            // if the user has specified the path to the utils script, fetch it on window.load, else resolve\r\n            if (this.options.utilsScript) {\r\n                // if the plugin is being initialised after the window.load event has already been fired\r\n                if ($.fn[pluginName].windowLoaded) {\r\n                    $.fn[pluginName].loadUtils(this.options.utilsScript, this.utilsScriptDeferred);\r\n                } else {\r\n                    // wait until the load event so we don't block any other requests e.g. the flags image\r\n                    $(window).on(\"load\", function() {\r\n                        $.fn[pluginName].loadUtils(that.options.utilsScript, that.utilsScriptDeferred);\r\n                    });\r\n                }\r\n            } else {\r\n                this.utilsScriptDeferred.resolve();\r\n            }\r\n            if (this.options.initialCountry === \"auto\") {\r\n                this._loadAutoCountry();\r\n            } else {\r\n                this.autoCountryDeferred.resolve();\r\n            }\r\n        },\r\n        // perform the geo ip lookup\r\n        _loadAutoCountry: function() {\r\n            var that = this;\r\n            // 3 options:\r\n            // 1) already loaded (we're done)\r\n            // 2) not already started loading (start)\r\n            // 3) already started loading (do nothing - just wait for loading callback to fire)\r\n            if ($.fn[pluginName].autoCountry) {\r\n                this.handleAutoCountry();\r\n            } else if (!$.fn[pluginName].startedLoadingAutoCountry) {\r\n                // don't do this twice!\r\n                $.fn[pluginName].startedLoadingAutoCountry = true;\r\n                if (typeof this.options.geoIpLookup === \"function\") {\r\n                    this.options.geoIpLookup(function(countryCode) {\r\n                        $.fn[pluginName].autoCountry = countryCode.toLowerCase();\r\n                        // tell all instances the auto country is ready\r\n                        // TODO: this should just be the current instances\r\n                        // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight away (e.g. if they have already done the geo ip lookup somewhere else). Using setTimeout means that the current thread of execution will finish before executing this, which allows the plugin to finish initialising.\r\n                        setTimeout(function() {\r\n                            $(\".intl-tel-input input\").intlTelInput(\"handleAutoCountry\");\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        // initialize any key listeners\r\n        _initKeyListeners: function() {\r\n            var that = this;\r\n            // update flag on keyup\r\n            // (keep this listener separate otherwise the setTimeout breaks all the tests)\r\n            this.telInput.on(\"keyup\" + this.ns, function() {\r\n                that._updateFlagFromNumber(that.telInput.val());\r\n            });\r\n            // update flag on cut/paste events (now supported in all major browsers)\r\n            this.telInput.on(\"cut\" + this.ns + \" paste\" + this.ns, function() {\r\n                // hack because \"paste\" event is fired before input is updated\r\n                setTimeout(function() {\r\n                    that._updateFlagFromNumber(that.telInput.val());\r\n                });\r\n            });\r\n        },\r\n        // adhere to the input's maxlength attr\r\n        _cap: function(number) {\r\n            var max = this.telInput.attr(\"maxlength\");\r\n            return max && number.length > max ? number.substr(0, max) : number;\r\n        },\r\n        // listen for mousedown, focus and blur\r\n        _initFocusListeners: function() {\r\n            var that = this;\r\n            // mousedown decides where the cursor goes, so if we're focusing we must preventDefault as we'll be inserting the dial code, and we want the cursor to be at the end no matter where they click\r\n            this.telInput.on(\"mousedown\" + this.ns, function(e) {\r\n                if (!that.telInput.is(\":focus\") && !that.telInput.val()) {\r\n                    e.preventDefault();\r\n                    // but this also cancels the focus, so we must trigger that manually\r\n                    that.telInput.focus();\r\n                }\r\n            });\r\n            // on focus: if empty, insert the dial code for the currently selected flag\r\n            this.telInput.on(\"focus\" + this.ns, function(e) {\r\n                if (!that.telInput.val() && !that.telInput.prop(\"readonly\") && that.selectedCountryData.dialCode) {\r\n                    // insert the dial code\r\n                    that.telInput.val(\"+\" + that.selectedCountryData.dialCode);\r\n                    // after auto-inserting a dial code, if the first key they hit is '+' then assume they are entering a new number, so remove the dial code. use keypress instead of keydown because keydown gets triggered for the shift key (required to hit the + key), and instead of keyup because that shows the new '+' before removing the old one\r\n                    that.telInput.one(\"keypress.plus\" + that.ns, function(e) {\r\n                        if (e.which == keys.PLUS) {\r\n                            that.telInput.val(\"\");\r\n                        }\r\n                    });\r\n                    // after tabbing in, make sure the cursor is at the end we must use setTimeout to get outside of the focus handler as it seems the selection happens after that\r\n                    setTimeout(function() {\r\n                        var input = that.telInput[0];\r\n                        if (that.isGoodBrowser) {\r\n                            var len = that.telInput.val().length;\r\n                            input.setSelectionRange(len, len);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            // on blur or form submit: if just a dial code then remove it\r\n            var form = this.telInput.prop(\"form\");\r\n            if (form) {\r\n                $(form).on(\"submit\" + this.ns, function() {\r\n                    that._removeEmptyDialCode();\r\n                });\r\n            }\r\n            this.telInput.on(\"blur\" + this.ns, function() {\r\n                that._removeEmptyDialCode();\r\n            });\r\n        },\r\n        _removeEmptyDialCode: function() {\r\n            var value = this.telInput.val(), startsPlus = value.charAt(0) == \"+\";\r\n            if (startsPlus) {\r\n                var numeric = this._getNumeric(value);\r\n                // if just a plus, or if just a dial code\r\n                if (!numeric || this.selectedCountryData.dialCode == numeric) {\r\n                    this.telInput.val(\"\");\r\n                }\r\n            }\r\n            // remove the keypress listener we added on focus\r\n            this.telInput.off(\"keypress.plus\" + this.ns);\r\n        },\r\n        // extract the numeric digits from the given string\r\n        _getNumeric: function(s) {\r\n            return s.replace(/\\D/g, \"\");\r\n        },\r\n        // show the dropdown\r\n        _showDropdown: function() {\r\n            this._setDropdownPosition();\r\n            // update highlighting and scroll to active list item\r\n            var activeListItem = this.countryList.children(\".active\");\r\n            if (activeListItem.length) {\r\n                this._highlightListItem(activeListItem);\r\n                this._scrollTo(activeListItem);\r\n            }\r\n            // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\r\n            this._bindDropdownListeners();\r\n            // update the arrow\r\n            this.selectedFlagInner.children(\".iti-arrow\").addClass(\"up\");\r\n        },\r\n        // decide where to position dropdown (depends on position within viewport, and scroll)\r\n        _setDropdownPosition: function() {\r\n            var that = this;\r\n            if (this.options.dropdownContainer) {\r\n                this.dropdown.appendTo(this.options.dropdownContainer);\r\n            }\r\n            // show the menu and grab the dropdown height\r\n            this.dropdownHeight = this.countryList.removeClass(\"hide\").outerHeight();\r\n            if (!this.isMobile) {\r\n                var pos = this.telInput.offset(), inputTop = pos.top, windowTop = $(window).scrollTop(), // dropdownFitsBelow = (dropdownBottom < windowBottom)\r\n                dropdownFitsBelow = inputTop + this.telInput.outerHeight() + this.dropdownHeight < windowTop + $(window).height(), dropdownFitsAbove = inputTop - this.dropdownHeight > windowTop;\r\n                // by default, the dropdown will be below the input. If we want to position it above the input, we add the dropup class.\r\n                this.countryList.toggleClass(\"dropup\", !dropdownFitsBelow && dropdownFitsAbove);\r\n                // if dropdownContainer is enabled, calculate postion\r\n                if (this.options.dropdownContainer) {\r\n                    // by default the dropdown will be directly over the input because it's not in the flow. If we want to position it below, we need to add some extra top value.\r\n                    var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.innerHeight();\r\n                    // calculate placement\r\n                    this.dropdown.css({\r\n                        top: inputTop + extraTop,\r\n                        left: pos.left\r\n                    });\r\n                    // close menu on window scroll\r\n                    $(window).on(\"scroll\" + this.ns, function() {\r\n                        that._closeDropdown();\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        // we only bind dropdown listeners when the dropdown is open\r\n        _bindDropdownListeners: function() {\r\n            var that = this;\r\n            // when mouse over a list item, just highlight that one\r\n            // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\r\n            this.countryList.on(\"mouseover\" + this.ns, \".country\", function(e) {\r\n                that._highlightListItem($(this));\r\n            });\r\n            // listen for country selection\r\n            this.countryList.on(\"click\" + this.ns, \".country\", function(e) {\r\n                that._selectListItem($(this));\r\n            });\r\n            // click off to close\r\n            // (except when this initial opening click is bubbling up)\r\n            // we cannot just stopPropagation as it may be needed to close another instance\r\n            var isOpening = true;\r\n            $(\"html\").on(\"click\" + this.ns, function(e) {\r\n                if (!isOpening) {\r\n                    that._closeDropdown();\r\n                }\r\n                isOpening = false;\r\n            });\r\n            // listen for up/down scrolling, enter to select, or letters to jump to country name.\r\n            // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\r\n            // just hit down and hold it to scroll down (no keyup event).\r\n            // listen on the document because that's where key events are triggered if no input has focus\r\n            var query = \"\", queryTimer = null;\r\n            $(document).on(\"keydown\" + this.ns, function(e) {\r\n                // prevent down key from scrolling the whole page,\r\n                // and enter key from submitting a form etc\r\n                e.preventDefault();\r\n                if (e.which == keys.UP || e.which == keys.DOWN) {\r\n                    // up and down to navigate\r\n                    that._handleUpDownKey(e.which);\r\n                } else if (e.which == keys.ENTER) {\r\n                    // enter to select\r\n                    that._handleEnterKey();\r\n                } else if (e.which == keys.ESC) {\r\n                    // esc to close\r\n                    that._closeDropdown();\r\n                } else if (e.which >= keys.A && e.which <= keys.Z || e.which == keys.SPACE) {\r\n                    // upper case letters (note: keyup/keydown only return upper case letters)\r\n                    // jump to countries that start with the query string\r\n                    if (queryTimer) {\r\n                        clearTimeout(queryTimer);\r\n                    }\r\n                    query += String.fromCharCode(e.which);\r\n                    that._searchForCountry(query);\r\n                    // if the timer hits 1 second, reset the query\r\n                    queryTimer = setTimeout(function() {\r\n                        query = \"\";\r\n                    }, 1e3);\r\n                }\r\n            });\r\n        },\r\n        // highlight the next/prev item in the list (and ensure it is visible)\r\n        _handleUpDownKey: function(key) {\r\n            var current = this.countryList.children(\".highlight\").first();\r\n            var next = key == keys.UP ? current.prev() : current.next();\r\n            if (next.length) {\r\n                // skip the divider\r\n                if (next.hasClass(\"divider\")) {\r\n                    next = key == keys.UP ? next.prev() : next.next();\r\n                }\r\n                this._highlightListItem(next);\r\n                this._scrollTo(next);\r\n            }\r\n        },\r\n        // select the currently highlighted item\r\n        _handleEnterKey: function() {\r\n            var currentCountry = this.countryList.children(\".highlight\").first();\r\n            if (currentCountry.length) {\r\n                this._selectListItem(currentCountry);\r\n            }\r\n        },\r\n        // find the first list item whose name starts with the query string\r\n        _searchForCountry: function(query) {\r\n            for (var i = 0; i < this.countries.length; i++) {\r\n                if (this._startsWith(this.countries[i].name, query)) {\r\n                    var listItem = this.countryList.children(\"[data-country-code=\" + this.countries[i].iso2 + \"]\").not(\".preferred\");\r\n                    // update highlighting and scroll\r\n                    this._highlightListItem(listItem);\r\n                    this._scrollTo(listItem, true);\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        // check if (uppercase) string a starts with string b\r\n        _startsWith: function(a, b) {\r\n            return a.substr(0, b.length).toUpperCase() == b;\r\n        },\r\n        // update the input's value to the given val (format first if possible)\r\n        // NOTE: this is called from _setInitialState, handleUtils and setNumber\r\n        _updateValFromNumber: function(number, doFormat) {\r\n            if (doFormat && window.intlTelInputUtils && this.selectedCountryData) {\r\n                var format = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) != \"+\") ? intlTelInputUtils.numberFormat.NATIONAL : intlTelInputUtils.numberFormat.INTERNATIONAL;\r\n                number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\r\n            }\r\n            number = this._beforeSetNumber(number);\r\n            this.telInput.val(number);\r\n        },\r\n        // check if need to select a new flag based on the given number\r\n        // Note: called from _setInitialState, keyup handler, setNumber\r\n        _updateFlagFromNumber: function(number, isInit) {\r\n            // if we're in nationalMode and we already have US/Canada selected, make sure the number starts with a +1 so _getDialCode will be able to extract the area code\r\n            // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag from the number), that means we're initialising the plugin with a number that already has a dial code, so fine to ignore this bit\r\n            if (number && this.options.nationalMode && this.selectedCountryData && this.selectedCountryData.dialCode == \"1\" && number.charAt(0) != \"+\") {\r\n                if (number.charAt(0) != \"1\") {\r\n                    number = \"1\" + number;\r\n                }\r\n                number = \"+\" + number;\r\n            }\r\n            // try and extract valid dial code from input\r\n            var dialCode = this._getDialCode(number), countryCode = null;\r\n            if (dialCode) {\r\n                // check if one of the matching countries is already selected\r\n                var countryCodes = this.countryCodes[this._getNumeric(dialCode)], alreadySelected = this.selectedCountryData && $.inArray(this.selectedCountryData.iso2, countryCodes) != -1;\r\n                // if a matching country is not already selected (or this is an unknown NANP area code): choose the first in the list\r\n                if (!alreadySelected || this._isUnknownNanp(number, dialCode)) {\r\n                    // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first non-empty index\r\n                    for (var j = 0; j < countryCodes.length; j++) {\r\n                        if (countryCodes[j]) {\r\n                            countryCode = countryCodes[j];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (number.charAt(0) == \"+\" && this._getNumeric(number).length) {\r\n                // invalid dial code, so empty\r\n                // Note: use getNumeric here because the number has not been formatted yet, so could contain bad chars\r\n                countryCode = \"\";\r\n            } else if (!number || number == \"+\") {\r\n                // empty, or just a plus, so default\r\n                countryCode = this.defaultCountry;\r\n            }\r\n            if (countryCode !== null) {\r\n                this._setFlag(countryCode, isInit);\r\n            }\r\n        },\r\n        // check if the given number contains an unknown area code from the North American Numbering Plan i.e. the only dialCode that could be extracted was +1 (instead of say +1 702) and the actual number's length is >=4\r\n        _isUnknownNanp: function(number, dialCode) {\r\n            return dialCode == \"+1\" && this._getNumeric(number).length >= 4;\r\n        },\r\n        // remove highlighting from other list items and highlight the given item\r\n        _highlightListItem: function(listItem) {\r\n            this.countryListItems.removeClass(\"highlight\");\r\n            listItem.addClass(\"highlight\");\r\n        },\r\n        // find the country data for the given country code\r\n        // the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array\r\n        _getCountryData: function(countryCode, ignoreOnlyCountriesOption, allowFail) {\r\n            var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\r\n            for (var i = 0; i < countryList.length; i++) {\r\n                if (countryList[i].iso2 == countryCode) {\r\n                    return countryList[i];\r\n                }\r\n            }\r\n            if (allowFail) {\r\n                return null;\r\n            } else {\r\n                throw new Error(\"No country data for '\" + countryCode + \"'\");\r\n            }\r\n        },\r\n        // select the given flag, update the placeholder and the active list item\r\n        // Note: called from _setInitialState, _updateFlagFromNumber, _selectListItem, setCountry\r\n        _setFlag: function(countryCode, isInit) {\r\n            var prevCountry = this.selectedCountryData && this.selectedCountryData.iso2 ? this.selectedCountryData : {};\r\n            // do this first as it will throw an error and stop if countryCode is invalid\r\n            this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\r\n            // update the defaultCountry - we only need the iso2 from now on, so just store that\r\n            if (this.selectedCountryData.iso2) {\r\n                this.defaultCountry = this.selectedCountryData.iso2;\r\n            }\r\n            this.selectedFlagInner.attr(\"class\", \"iti-flag \" + countryCode);\r\n            // update the selected country's title attribute\r\n            var title = countryCode ? this.selectedCountryData.name + \": +\" + this.selectedCountryData.dialCode : \"Unknown\";\r\n            this.selectedFlagInner.parent().attr(\"title\", title);\r\n            if (this.options.separateDialCode) {\r\n                var dialCode = this.selectedCountryData.dialCode ? \"+\" + this.selectedCountryData.dialCode : \"\", parent = this.telInput.parent();\r\n                if (prevCountry.dialCode) {\r\n                    parent.removeClass(\"iti-sdc-\" + (prevCountry.dialCode.length + 1));\r\n                }\r\n                if (dialCode) {\r\n                    parent.addClass(\"iti-sdc-\" + dialCode.length);\r\n                }\r\n                this.selectedDialCode.text(dialCode);\r\n            }\r\n            // and the input's placeholder\r\n            this._updatePlaceholder();\r\n            // update the active list item\r\n            this.countryListItems.removeClass(\"active\");\r\n            if (countryCode) {\r\n                this.countryListItems.find(\".iti-flag.\" + countryCode).first().closest(\".country\").addClass(\"active\");\r\n            }\r\n            // on change flag, trigger a custom event\r\n            if (!isInit && prevCountry.iso2 !== countryCode) {\r\n                this.telInput.trigger(\"countrychange\", this.selectedCountryData);\r\n            }\r\n        },\r\n        // update the input placeholder to an example number from the currently selected country\r\n        _updatePlaceholder: function() {\r\n            if (window.intlTelInputUtils && !this.hadInitialPlaceholder && this.options.autoPlaceholder && this.selectedCountryData) {\r\n                var numberType = intlTelInputUtils.numberType[this.options.numberType], placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\r\n                placeholder = this._beforeSetNumber(placeholder);\r\n                if (typeof this.options.customPlaceholder === \"function\") {\r\n                    placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\r\n                }\r\n                this.telInput.attr(\"placeholder\", placeholder);\r\n            }\r\n        },\r\n        // called when the user selects a list item from the dropdown\r\n        _selectListItem: function(listItem) {\r\n            // update selected flag and active list item\r\n            this._setFlag(listItem.attr(\"data-country-code\"));\r\n            this._closeDropdown();\r\n            this._updateDialCode(listItem.attr(\"data-dial-code\"), true);\r\n            // focus the input\r\n            this.telInput.focus();\r\n            // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto inserting dial code), who try to put the cursor at the beginning the first time\r\n            if (this.isGoodBrowser) {\r\n                var len = this.telInput.val().length;\r\n                this.telInput[0].setSelectionRange(len, len);\r\n            }\r\n        },\r\n        // close the dropdown and unbind any listeners\r\n        _closeDropdown: function() {\r\n            this.countryList.addClass(\"hide\");\r\n            // update the arrow\r\n            this.selectedFlagInner.children(\".iti-arrow\").removeClass(\"up\");\r\n            // unbind key events\r\n            $(document).off(this.ns);\r\n            // unbind click-off-to-close\r\n            $(\"html\").off(this.ns);\r\n            // unbind hover and click listeners\r\n            this.countryList.off(this.ns);\r\n            // remove menu from container\r\n            if (this.options.dropdownContainer) {\r\n                if (!this.isMobile) {\r\n                    $(window).off(\"scroll\" + this.ns);\r\n                }\r\n                this.dropdown.detach();\r\n            }\r\n        },\r\n        // check if an element is visible within it's container, else scroll until it is\r\n        _scrollTo: function(element, middle) {\r\n            var container = this.countryList, containerHeight = container.height(), containerTop = container.offset().top, containerBottom = containerTop + containerHeight, elementHeight = element.outerHeight(), elementTop = element.offset().top, elementBottom = elementTop + elementHeight, newScrollTop = elementTop - containerTop + container.scrollTop(), middleOffset = containerHeight / 2 - elementHeight / 2;\r\n            if (elementTop < containerTop) {\r\n                // scroll up\r\n                if (middle) {\r\n                    newScrollTop -= middleOffset;\r\n                }\r\n                container.scrollTop(newScrollTop);\r\n            } else if (elementBottom > containerBottom) {\r\n                // scroll down\r\n                if (middle) {\r\n                    newScrollTop += middleOffset;\r\n                }\r\n                var heightDifference = containerHeight - elementHeight;\r\n                container.scrollTop(newScrollTop - heightDifference);\r\n            }\r\n        },\r\n        // replace any existing dial code with the new one\r\n        // Note: called from _selectListItem and setCountry\r\n        _updateDialCode: function(newDialCode, hasSelectedListItem) {\r\n            var inputVal = this.telInput.val(), newNumber;\r\n            // save having to pass this every time\r\n            newDialCode = \"+\" + newDialCode;\r\n            if (inputVal.charAt(0) == \"+\") {\r\n                // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\r\n                var prevDialCode = this._getDialCode(inputVal);\r\n                if (prevDialCode) {\r\n                    // current number contains a valid dial code, so replace it\r\n                    newNumber = inputVal.replace(prevDialCode, newDialCode);\r\n                } else {\r\n                    // current number contains an invalid dial code, so ditch it\r\n                    // (no way to determine where the invalid dial code ends and the rest of the number begins)\r\n                    newNumber = newDialCode;\r\n                }\r\n            } else if (this.options.nationalMode || this.options.separateDialCode) {\r\n                // don't do anything\r\n                return;\r\n            } else {\r\n                // nationalMode is disabled\r\n                if (inputVal) {\r\n                    // there is an existing value with no dial code: prefix the new dial code\r\n                    newNumber = newDialCode + inputVal;\r\n                } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\r\n                    // no existing value and either they've just selected a list item, or autoHideDialCode is disabled: insert new dial code\r\n                    newNumber = newDialCode;\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            this.telInput.val(newNumber);\r\n        },\r\n        // try and extract a valid international dial code from a full telephone number\r\n        // Note: returns the raw string inc plus character and any whitespace/dots etc\r\n        _getDialCode: function(number) {\r\n            var dialCode = \"\";\r\n            // only interested in international numbers (starting with a plus)\r\n            if (number.charAt(0) == \"+\") {\r\n                var numericChars = \"\";\r\n                // iterate over chars\r\n                for (var i = 0; i < number.length; i++) {\r\n                    var c = number.charAt(i);\r\n                    // if char is number\r\n                    if ($.isNumeric(c)) {\r\n                        numericChars += c;\r\n                        // if current numericChars make a valid dial code\r\n                        if (this.countryCodes[numericChars]) {\r\n                            // store the actual raw string (useful for matching later)\r\n                            dialCode = number.substr(0, i + 1);\r\n                        }\r\n                        // longest dial code is 4 chars\r\n                        if (numericChars.length == 4) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return dialCode;\r\n        },\r\n        // get the input val, adding the dial code if separateDialCode is enabled\r\n        _getFullNumber: function() {\r\n            var prefix = this.options.separateDialCode ? \"+\" + this.selectedCountryData.dialCode : \"\";\r\n            return prefix + this.telInput.val();\r\n        },\r\n        // remove the dial code if separateDialCode is enabled\r\n        _beforeSetNumber: function(number) {\r\n            if (this.options.separateDialCode) {\r\n                var dialCode = this._getDialCode(number);\r\n                if (dialCode) {\r\n                    // US dialCode is \"+1\", which is what we want\r\n                    // CA dialCode is \"+1 123\", which is wrong - should be \"+1\" (as it has multiple area codes)\r\n                    // AS dialCode is \"+1 684\", which is what we want\r\n                    // Solution: if the country has area codes, then revert to just the dial code\r\n                    if (this.selectedCountryData.areaCodes !== null) {\r\n                        dialCode = \"+\" + this.selectedCountryData.dialCode;\r\n                    }\r\n                    // a lot of numbers will have a space separating the dial code and the main number, and some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get rid of it\r\n                    // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\r\n                    var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\r\n                    number = number.substr(start);\r\n                }\r\n            }\r\n            return this._cap(number);\r\n        },\r\n        /********************\r\n   *  PUBLIC METHODS\r\n   ********************/\r\n        // this is called when the geoip call returns\r\n        handleAutoCountry: function() {\r\n            if (this.options.initialCountry === \"auto\") {\r\n                // we must set this even if there is an initial val in the input: in case the initial val is invalid and they delete it - they should see their auto country\r\n                this.defaultCountry = $.fn[pluginName].autoCountry;\r\n                // if there's no initial value in the input, then update the flag\r\n                if (!this.telInput.val()) {\r\n                    this.setCountry(this.defaultCountry);\r\n                }\r\n                this.autoCountryDeferred.resolve();\r\n            }\r\n        },\r\n        // remove plugin\r\n        destroy: function() {\r\n            if (this.allowDropdown) {\r\n                // make sure the dropdown is closed (and unbind listeners)\r\n                this._closeDropdown();\r\n                // click event to open dropdown\r\n                this.selectedFlagInner.parent().off(this.ns);\r\n                // label click hack\r\n                this.telInput.closest(\"label\").off(this.ns);\r\n            }\r\n            // unbind submit event handler on form\r\n            if (this.options.autoHideDialCode) {\r\n                var form = this.telInput.prop(\"form\");\r\n                if (form) {\r\n                    $(form).off(this.ns);\r\n                }\r\n            }\r\n            // unbind all events: key events, and focus/blur events if autoHideDialCode=true\r\n            this.telInput.off(this.ns);\r\n            // remove markup (but leave the original input)\r\n            var container = this.telInput.parent();\r\n            container.before(this.telInput).remove();\r\n        },\r\n        // get the extension from the current number\r\n        getExtension: function() {\r\n            if (window.intlTelInputUtils) {\r\n                return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\r\n            }\r\n            return \"\";\r\n        },\r\n        // format the number to the given format\r\n        getNumber: function(format) {\r\n            if (window.intlTelInputUtils) {\r\n                return intlTelInputUtils.formatNumber(this._getFullNumber(), this.selectedCountryData.iso2, format);\r\n            }\r\n            return \"\";\r\n        },\r\n        // get the type of the entered number e.g. landline/mobile\r\n        getNumberType: function() {\r\n            if (window.intlTelInputUtils) {\r\n                return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\r\n            }\r\n            return -99;\r\n        },\r\n        // get the country data for the currently selected flag\r\n        getSelectedCountryData: function() {\r\n            // if this is undefined, the plugin will return it's instance instead, so in that case an empty object makes more sense\r\n            return this.selectedCountryData || {};\r\n        },\r\n        // get the validation error\r\n        getValidationError: function() {\r\n            if (window.intlTelInputUtils) {\r\n                return intlTelInputUtils.getValidationError(this._getFullNumber(), this.selectedCountryData.iso2);\r\n            }\r\n            return -99;\r\n        },\r\n        // validate the input val - assumes the global function isValidNumber (from utilsScript)\r\n        isValidNumber: function() {\r\n            var val = $.trim(this._getFullNumber()), countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\r\n            return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\r\n        },\r\n        // update the selected flag, and update the input val accordingly\r\n        setCountry: function(countryCode) {\r\n            countryCode = countryCode.toLowerCase();\r\n            // check if already selected\r\n            if (!this.selectedFlagInner.hasClass(countryCode)) {\r\n                this._setFlag(countryCode);\r\n                this._updateDialCode(this.selectedCountryData.dialCode, false);\r\n            }\r\n        },\r\n        // set the input value and update the flag\r\n        // NOTE: preventFormat arg is for public method\r\n        setNumber: function(number, preventFormat) {\r\n            // we must update the flag first, which updates this.selectedCountryData, which is used for formatting the number before displaying it\r\n            this._updateFlagFromNumber(number);\r\n            this._updateValFromNumber(number, !preventFormat);\r\n        },\r\n        // this is called when the utils request completes\r\n        handleUtils: function() {\r\n            // if the request was successful\r\n            if (window.intlTelInputUtils) {\r\n                // if there's an initial value in the input, then format it\r\n                if (this.telInput.val()) {\r\n                    this._updateValFromNumber(this.telInput.val(), this.options.formatOnInit);\r\n                }\r\n                this._updatePlaceholder();\r\n            }\r\n            this.utilsScriptDeferred.resolve();\r\n        }\r\n    };\r\n    // using https://github.com/jquery-boilerplate/jquery-boilerplate/wiki/Extending-jQuery-Boilerplate\r\n    // (adapted to allow public functions)\r\n    $.fn[pluginName] = function(options) {\r\n        var args = arguments;\r\n        // Is the first parameter an object (options), or was omitted,\r\n        // instantiate a new instance of the plugin.\r\n        if (options === undefined || typeof options === \"object\") {\r\n            // collect all of the deferred objects for all instances created with this selector\r\n            var deferreds = [];\r\n            this.each(function() {\r\n                if (!$.data(this, \"plugin_\" + pluginName)) {\r\n                    var instance = new Plugin(this, options);\r\n                    var instanceDeferreds = instance._init();\r\n                    // we now have 2 deffereds: 1 for auto country, 1 for utils script\r\n                    deferreds.push(instanceDeferreds[0]);\r\n                    deferreds.push(instanceDeferreds[1]);\r\n                    $.data(this, \"plugin_\" + pluginName, instance);\r\n                }\r\n            });\r\n            // return the promise from the \"master\" deferred object that tracks all the others\r\n            return $.when.apply(null, deferreds);\r\n        } else if (typeof options === \"string\" && options[0] !== \"_\") {\r\n            // If the first parameter is a string and it doesn't start\r\n            // with an underscore or \"contains\" the `init`-function,\r\n            // treat this as a call to a public method.\r\n            // Cache the method call to make it possible to return a value\r\n            var returns;\r\n            this.each(function() {\r\n                var instance = $.data(this, \"plugin_\" + pluginName);\r\n                // Tests that there's already a plugin-instance\r\n                // and checks that the requested public method exists\r\n                if (instance instanceof Plugin && typeof instance[options] === \"function\") {\r\n                    // Call the method of our plugin instance,\r\n                    // and pass it the supplied arguments.\r\n                    returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));\r\n                }\r\n                // Allow instances to be destroyed via the 'destroy' method\r\n                if (options === \"destroy\") {\r\n                    $.data(this, \"plugin_\" + pluginName, null);\r\n                }\r\n            });\r\n            // If the earlier cached method gives a value back return the value,\r\n            // otherwise return this to preserve chainability.\r\n            return returns !== undefined ? returns : this;\r\n        }\r\n    };\r\n    /********************\r\n *  STATIC METHODS\r\n ********************/\r\n    // get the country data object\r\n    $.fn[pluginName].getCountryData = function() {\r\n        return allCountries;\r\n    };\r\n    // load the utils script\r\n    $.fn[pluginName].loadUtils = function(path, utilsScriptDeferred) {\r\n        if (!$.fn[pluginName].loadedUtilsScript) {\r\n            // don't do this twice! (dont just check if window.intlTelInputUtils exists as if init plugin multiple times in quick succession, it may not have finished loading yet)\r\n            $.fn[pluginName].loadedUtilsScript = true;\r\n            // dont use $.getScript as it prevents caching\r\n            $.ajax({\r\n                url: path,\r\n                complete: function() {\r\n                    // tell all instances that the utils request is complete\r\n                    $(\".intl-tel-input input\").intlTelInput(\"handleUtils\");\r\n                },\r\n                dataType: \"script\",\r\n                cache: true\r\n            });\r\n        } else if (utilsScriptDeferred) {\r\n            utilsScriptDeferred.resolve();\r\n        }\r\n    };\r\n    // version\r\n    $.fn[pluginName].version = \"9.0.6\";\r\n    // Tell JSHint to ignore this warning: \"character may get silently deleted by one or more browsers\"\r\n    // jshint -W100\r\n    // Array of country objects for the flag dropdown.\r\n    // Each contains a name, country code (ISO 3166-1 alpha-2) and dial code.\r\n    // Originally from https://github.com/mledoze/countries\r\n    // then with a couple of manual re-arrangements to be alphabetical\r\n    // then changed Kazakhstan from +76 to +7\r\n    // and Vatican City from +379 to +39 (see issue 50)\r\n    // and Caribean Netherlands from +5997 to +599\r\n    // and Curacao from +5999 to +599\r\n    // Removed:  Kosovo, Pitcairn Islands, South Georgia\r\n    // UPDATE Sept 12th 2015\r\n    // List of regions that have iso2 country codes, which I have chosen to omit:\r\n    // (based on this information: https://en.wikipedia.org/wiki/List_of_country_calling_codes)\r\n    // AQ - Antarctica - all different country codes depending on which \"base\"\r\n    // BV - Bouvet Island - no calling code\r\n    // GS - South Georgia and the South Sandwich Islands - \"inhospitable collection of islands\" - same flag and calling code as Falkland Islands\r\n    // HM - Heard Island and McDonald Islands - no calling code\r\n    // PN - Pitcairn - tiny population (56), same calling code as New Zealand\r\n    // TF - French Southern Territories - no calling code\r\n    // UM - United States Minor Outlying Islands - no calling code\r\n    // UPDATE the criteria of supported countries or territories (see issue 297)\r\n    // Have an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\r\n    // Have a country calling code: https://en.wikipedia.org/wiki/List_of_country_calling_codes\r\n    // Have a flag\r\n    // Must be supported by libphonenumber: https://github.com/googlei18n/libphonenumber\r\n    // Update: converted objects to arrays to save bytes!\r\n    // Update: added \"priority\" for countries with the same dialCode as others\r\n    // Update: added array of area codes for countries with the same dialCode as others\r\n    // So each country array has the following information:\r\n    // [\r\n    //    Country name,\r\n    //    iso2 code,\r\n    //    International dial code,\r\n    //    Order (if >1 country with same dial code),\r\n    //    Area codes (if >1 country with same dial code)\r\n    // ]\r\n    var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1684\" ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1264\" ], [ \"Antigua and Barbuda\", \"ag\", \"1268\" ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1242\" ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1246\" ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1441\" ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1284\" ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1 ], [ \"Cayman Islands\", \"ky\", \"1345\" ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2 ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1 ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1767\" ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1473\" ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1671\" ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1 ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2 ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1876\" ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3 ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1 ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1 ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1664\" ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1670\" ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy (Saint-Barthélemy)\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1869\" ], [ \"Saint Lucia\", \"lc\", \"1758\" ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1784\" ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1721\" ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1 ], [ \"Swaziland\", \"sz\", \"268\" ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1868\" ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1649\" ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1340\" ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1 ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1 ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1 ] ];\r\n    // loop over all of the countries above\r\n    for (var i = 0; i < allCountries.length; i++) {\r\n        var c = allCountries[i];\r\n        allCountries[i] = {\r\n            name: c[0],\r\n            iso2: c[1],\r\n            dialCode: c[2],\r\n            priority: c[3] || 0,\r\n            areaCodes: c[4] || null\r\n        };\r\n    }\r\n});"],"sourceRoot":"/source/"}